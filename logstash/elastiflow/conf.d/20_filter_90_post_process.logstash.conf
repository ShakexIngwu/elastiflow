#------------------------------------------------------------------------------
# Copyright (C)2018 KOIOSSIAN
# 
# The contents of this file and/or repository are subject to the Koiossian
# Public License (the "License") and may not be used or distributed except in
# compliance with the License. You may obtain a copy of the License at:
# 
# http://www.koiossian.com/public/koiossian_public_license.txt
# 
# Software distributed under the License is distributed on an "AS IS" basis,
# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for
# the specific language governing rights and limitations under the License.
# 
# The Original Source Code was developed by Koiossian. Portions created by
# Koiossian are Copyright (C)2018 Koiossian. All Rights Reserved.
#------------------------------------------------------------------------------

filter {
  # We now have a normalized flow record. The rest of the logic works regardless of the flow type or version.

  # If enabled, resolve names of source and destination IP addresses.
  if [flow][dst_addr] {
    # If localhost then use the IP from the host field.
    if [flow][dst_addr] == "127.0.0.1" {
      mutate {
        id => "elastiflow_dst_hostname_localhost"
        replace => { "[flow][dst_hostname]" => "%{[event][host]}" }
      }
    } else {
      mutate {
        id => "elastiflow_dst_hostname_addr"
        add_field => { "[flow][dst_hostname]" => "%{[flow][dst_addr]}"}
      }
    }
    # Resolve destination IP address to hostname.
    if [@metadata][resolve_ip2host] == "true" {
      dns {
        id => "elastiflow_dns_dst_hostname"
        reverse => [ "[flow][dst_hostname]" ]
        action => "replace"
        nameserver => "${ELASTIFLOW_NAMESERVER:127.0.0.1}"
      }
    }
  }

  if [flow][src_addr] {
    # If localhost then use the IP from the host field.
    if [flow][src_addr] == "127.0.0.1" {
      mutate {
        id => "elastiflow_src_hostname_localhost"
        replace => { "[flow][src_hostname]" => "%{[event][host]}" }
      }
    } else {
      mutate {
        id => "elastiflow_src_hostname_addr"
        add_field => { "[flow][src_hostname]" => "%{[flow][src_addr]}"}
      }
    }
    # Resolve source IP address to hostname.
    if [@metadata][resolve_ip2host] == "true" {
      dns {
        id => "elastiflow_dns_src_hostname"
        reverse => [ "[flow][src_hostname]" ]
        action => "replace"
        nameserver => "${ELASTIFLOW_NAMESERVER:127.0.0.1}"
      }
    }
  }

  # Determine the locality of the traffic.
  if [flow][dst_addr] or [flow][src_addr] {
    # Initialize traffic_locality to private. This maybe changed to public based on analysis of the source and destination IP addresses below.
    mutate {
      id => "elastiflow_postproc_traffic_locality_default"
      add_field => { "[flow][traffic_locality]" => "private" }
    }

    if [flow][dst_addr] {
      # Check if destination IP address is private.
      cidr {
        id => "elastiflow_postproc_cidr_dst_addr"
        address => [ "%{[flow][dst_addr]}" ]
        network => [ "0.0.0.0/32", "10.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16", "fc00::/7", "127.0.0.0/8", "::1/128","169.254.0.0/16", "fe80::/10","224.0.0.0/4", "ff00::/8","255.255.255.255/32" ]
        add_field => { "[flow][dst_locality]" => "private" }
      }
      # Check to see if dst_locality exists. If it doesn't the dst_addr didn't match a private address space and locality must be public.
      if ![flow][dst_locality] {
        mutate {
          id => "elastiflow_postproc_dst_addr_public"
          add_field => { "[flow][dst_locality]" => "public" }
          replace => { "[flow][traffic_locality]" => "public" }
        }
      } else {
        mutate {
          id => "elastiflow_postproc_dst_as_private"
          add_field => { "[flow][geoip_dst][autonomous_system]" => "private" }
        }
      }
    }

    if [flow][src_addr] {
      # Check if source IP address is private.
      cidr {
        id => "elastiflow_postproc_cidr_src_addr"
        address => [ "%{[flow][src_addr]}" ]
        network => [ "0.0.0.0/32", "10.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16", "fc00::/7", "127.0.0.0/8", "::1/128", "169.254.0.0/16", "fe80::/10", "224.0.0.0/4", "ff00::/8", "255.255.255.255/32", "::" ]
        add_field => { "[flow][src_locality]" => "private" }
      }
      # Check to see if src_locality exists. If it doesn't the src_addr didn't match a private address space and locality must be public.
      if ![flow][src_locality] {
        mutate {
          id => "elastiflow_postproc_src_addr_public"
          add_field => { "[flow][src_locality]" => "public" }
          replace => { "[flow][traffic_locality]" => "public" }
        }
      } else {
        mutate {
          id => "elastiflow_postproc_src_as_private"
          add_field => { "[flow][geoip_src][autonomous_system]" => "private" }
        }
      } 
    }
  }
  
  # IP traffic processing.
  if [flow][ip_protocol] {
    # Replace protocol ID with well-known name.
    translate {
      id => "elastiflow_postproc_translate_protocol_name"
      dictionary_path => "${ELASTIFLOW_DICT_PATH:/etc/logstash/dictionaries}/iana_protocol_numbers.yml"
      field => "[flow][ip_protocol]"
      destination => "[flow][ip_protocol_name]"
      fallback => "UNKNOWN"
    }

    # lookup IANA service name for source and destination ports.
    if [flow][ip_protocol] == 6 { # TCP
      if [flow][src_port] {
        translate {
          id => "elastiflow_postproc_translate_src_port_name_tcp"
          dictionary_path => "${ELASTIFLOW_DICT_PATH:/etc/logstash/dictionaries}/iana_service_names_tcp.yml"
          field => "[flow][src_port]"
          destination => "[flow][src_port_name]"
          fallback => "__UNKNOWN"
        }
      }
      if [flow][dst_port] {
        translate {
          id => "elastiflow_postproc_translate_dst_port_name_tcp"
          dictionary_path => "${ELASTIFLOW_DICT_PATH:/etc/logstash/dictionaries}/iana_service_names_tcp.yml"
          field => "[flow][dst_port]"
          destination => "[flow][dst_port_name]"
          fallback => "__UNKNOWN"
        }
      }
    } else if [flow][ip_protocol] == 17 { # UDP
      if [flow][src_port] {
        translate {
          id => "elastiflow_postproc_translate_src_port_name_udp"
          dictionary_path => "${ELASTIFLOW_DICT_PATH:/etc/logstash/dictionaries}/iana_service_names_udp.yml"
          field => "[flow][src_port]"
          destination => "[flow][src_port_name]"
          fallback => "__UNKNOWN"
        }
      }
      if [flow][dst_port] {
        translate {
          id => "elastiflow_postproc_translate_dst_port_name_udp"
          dictionary_path => "${ELASTIFLOW_DICT_PATH:/etc/logstash/dictionaries}/iana_service_names_udp.yml"
          field => "[flow][dst_port]"
          destination => "[flow][dst_port_name]"
          fallback => "__UNKNOWN"
        }
      }
    } else if [flow][ip_protocol] == 132 { # SCTP
      if [flow][src_port] {
        translate {
          id => "elastiflow_postproc_translate_src_port_name_sctp"
          dictionary_path => "${ELASTIFLOW_DICT_PATH:/etc/logstash/dictionaries}/iana_service_names_sctp.yml"
          field => "[flow][src_port]"
          destination => "[flow][src_port_name]"
          fallback => "__UNKNOWN"
        }
      }
      if [flow][dst_port] {
        translate {
          id => "elastiflow_postproc_translate_dst_port_name_sctp"
          dictionary_path => "${ELASTIFLOW_DICT_PATH:/etc/logstash/dictionaries}/iana_service_names_sctp.yml"
          field => "[flow][dst_port]"
          destination => "[flow][dst_port_name]"
          fallback => "__UNKNOWN"
        }
      }
    } else if [flow][ip_protocol] == 33 { # DCCP
      if [flow][src_port] {
        translate {
          id => "elastiflow_postproc_translate_src_port_name_dccp"
          dictionary_path => "${ELASTIFLOW_DICT_PATH:/etc/logstash/dictionaries}/iana_service_names_dccp.yml"
          field => "[flow][src_port]"
          destination => "[flow][src_port_name]"
          fallback => "__UNKNOWN"
        }
      }
      if [flow][dst_port] {
        translate {
          id => "elastiflow_postproc_translate_dst_port_name_dccp"
          dictionary_path => "${ELASTIFLOW_DICT_PATH:/etc/logstash/dictionaries}/iana_service_names_dccp.yml"
          field => "[flow][dst_port]"
          destination => "[flow][dst_port_name]"
          fallback => "__UNKNOWN"
        }
      }
    } else {
      mutate {
        add_field => {
          "[flow][src_port_name]" => "__UNKNOWN"
          "[flow][dst_port_name]" => "__UNKNOWN"
        }
      }
    }

    # Ensure port numbers are integers.
    mutate {
      id => "elastiflow_postproc_convert_ports_to_int"
      convert => {
        "[flow][src_port]" => "integer"
        "[flow][dst_port]" => "integer"
      }
    }

    # Determine client and server from source and destination ports.
    if [flow][dst_port] and [flow][src_port] {
      if [flow][src_port_name] == "__UNKNOWN" {
        if [flow][dst_port_name] == "__UNKNOWN" {
          if [flow][dst_port] <= [flow][src_port] {
            mutate {
              id => "elastiflow_postproc_srcUn_dstUn_dstIsSrv"
              add_field => { "[@metadata][isServer]" => "dst" }
            }
          } else {
            mutate {
              id => "elastiflow_postproc_srcUn_dstUn_srcIsSrv"
              add_field => { "[@metadata][isServer]" => "src" }
            }
          }
        } else {
          mutate {
            id => "elastiflow_postproc_srcUn_dstKn_dstIsSrv"
            add_field => { "[@metadata][isServer]" => "dst" }
          }
        }
      } else {
        if [flow][dst_port_name] == "__UNKNOWN" {
          mutate {
            id => "elastiflow_postproc_srcKn_dstUn_srcIsSrv"
            add_field => { "[@metadata][isServer]" => "src" }
          }
        } else {
          if [flow][dst_port] <= [flow][src_port] {
            mutate {
              id => "elastiflow_postproc_srcKn_dstKn_dstIsSrv"
              add_field => { "[@metadata][isServer]" => "dst" }
            }
          } else {
            mutate {
              id => "elastiflow_postproc_srcKn_dstKn_srcIsSrv"
              add_field => { "[@metadata][isServer]" => "src" }
            }
          }
        }
      }
    }

    # Set final value of port name fields.
    if [flow][src_port_name] {
      if [flow][src_port_name] == "__UNKNOWN" {
        mutate {
          id => "elastiflow_postproc_src_port_name_unknown"
          replace => { "[flow][src_port_name]" => "%{[flow][ip_protocol_name]}/%{[flow][src_port]}" }
        }
      } else {
        mutate {
          id => "elastiflow_postproc_src_port_name_prepend_src_port"
          replace => { "[flow][src_port_name]" => "%{[flow][ip_protocol_name]}/%{[flow][src_port]} (%{[flow][src_port_name]})" }
        }
      }
    }
    if [flow][dst_port_name] {
      if [flow][dst_port_name] == "__UNKNOWN" {
        mutate {
          id => "elastiflow_postproc_dst_port_name_unknown"
          replace => { "[flow][dst_port_name]" => "%{[flow][ip_protocol_name]}/%{[flow][dst_port]}" }
        }
      } else {
        mutate {
          id => "elastiflow_postproc_dest_port_name_prepend_dst_port"
          replace => { "[flow][dst_port_name]" => "%{[flow][ip_protocol_name]}/%{[flow][dst_port]} (%{[flow][dst_port_name]})" }
        }
      }
    }

    # Set client, server and service fields.
    if [@metadata][isServer] == "dst" {
      mutate {
        id => "elastiflow_postproc_dstIsSrv_add_fields"
        add_field => {
          "[flow][server_addr]" => "%{[flow][dst_addr]}"
          "[flow][server_hostname]" => "%{[flow][dst_hostname]}"
          "[flow][server_locality]" => "%{[flow][dst_locality]}"
          "[flow][service_port]" => "%{[flow][dst_port]}"
          "[flow][service_name]" => "%{[flow][dst_port_name]}"
          "[flow][service_locality]" => "%{[flow][dst_locality]}"
          "[flow][client_addr]" => "%{[flow][src_addr]}"
          "[flow][client_hostname]" => "%{[flow][src_hostname]}"
          "[flow][client_locality]" => "%{[flow][src_locality]}"
        }
      }
    } else if [@metadata][isServer] == "src" {
      mutate {
        id => "elastiflow_postproc_srcIsSrv_add_fields"
        add_field => {
          "[flow][server_addr]" => "%{[flow][src_addr]}"
          "[flow][server_hostname]" => "%{[flow][src_hostname]}"
          "[flow][server_locality]" => "%{[flow][src_locality]}"
          "[flow][service_port]" => "%{[flow][src_port]}"
          "[flow][service_name]" => "%{[flow][src_port_name]}"
          "[flow][service_locality]" => "%{[flow][src_locality]}"
          "[flow][client_addr]" => "%{[flow][dst_addr]}"
          "[flow][client_hostname]" => "%{[flow][dst_hostname]}"
          "[flow][client_locality]" => "%{[flow][dst_locality]}"
        }
      }
    }
  }

  # GeoIP processing.
  if [flow][traffic_locality] == "public" {
    if [flow][dst_locality] == "public" {
      geoip {
        id => "elastiflow_postproc_geoip_dst_city"
        source => "[flow][dst_addr]"
        database => "${ELASTIFLOW_GEOIP_DB_PATH:/etc/logstash/geoipdbs}/GeoLite2-City.mmdb"
        target => "[flow][geoip_dst]"
        fields => [ "city_name", "country_name", "country_code2", "location" ]
        remove_field => [ "[flow][geoip_dst][ip]" ]
      }
      geoip {
        id => "elastiflow_postproc_geoip_dst_asn"
        source => "[flow][dst_addr]"
        database => "${ELASTIFLOW_GEOIP_DB_PATH:/etc/logstash/geoipdbs}/GeoLite2-ASN.mmdb"
        target => "[flow][geoip_dst]"
        remove_field => [ "[flow][geoip_dst][ip]" ]
      }
      # Populate geoip_dst.autonomous_system.
      if [flow][geoip_dst][as_org] {
        if [flow][geoip_dst][asn] {
          mutate {
            id => "elastiflow_postproc_dst_as_from_as_org_asn"
            add_field => { "[flow][geoip_dst][autonomous_system]" => "%{[flow][geoip_dst][as_org]} (%{[flow][geoip_dst][asn]})" }
          }
        } else {
          mutate {
            id => "elastiflow_postproc_dst_as_from_as_org"
            add_field => { "[flow][geoip_dst][autonomous_system]" => "%{[flow][geoip_dst][as_org]}" }
          }
        }
      } else if [flow][geoip_dst][asn] {
        mutate {
          id => "elastiflow_postproc_dst_as_from_asn"
          add_field => { "[flow][geoip_dst][autonomous_system]" => "%{[flow][geoip_dst][asn]}" }
        }
      }
      mutate {
        id => "elastiflow_cleanup_dst_as"
        remove_field => [
          "[flow][geoip_dst][asn]",
          "[flow][geoip_dst][as_org]"
        ]
      }
    }

    if [flow][src_locality] == "public" {
      geoip {
        id => "elastiflow_postproc_geoip_src_city"
        source => "[flow][src_addr]"
        database => "${ELASTIFLOW_GEOIP_DB_PATH:/etc/logstash/geoipdbs}/GeoLite2-City.mmdb"
        target => "[flow][geoip_src]"
        fields => [ "city_name", "country_name", "country_code2", "location" ]
        remove_field => [ "[flow][geoip_src][ip]" ]
      }
      geoip {
        id => "elastiflow_postproc_geoip_src_asn"
        source => "[flow][src_addr]"
        database => "${ELASTIFLOW_GEOIP_DB_PATH:/etc/logstash/geoipdbs}/GeoLite2-ASN.mmdb"
        target => "[flow][geoip_src]"
        remove_field => [ "[flow][geoip_src][ip]" ]
      }
      # Populate geoip_src.autonomous_system.
      if [flow][geoip_src][as_org] {
        if [flow][geoip_src][asn] {
          mutate {
            id => "elastiflow_postproc_src_as_from_as_org_asn"
            add_field => { "[flow][geoip_src][autonomous_system]" => "%{[flow][geoip_src][as_org]} (%{[flow][geoip_src][asn]})" }
          }
        } else {
          mutate {
            id => "elastiflow_postproc_src_as_from_as_org"
            add_field => { "[flow][geoip_src][autonomous_system]" => "%{[flow][geoip_src][as_org]}" }
          }
        }
      } else if [flow][geoip_src][asn] {
        mutate {
          id => "elastiflow_postproc_src_as_from_asn"
          add_field => { "[flow][geoip_src][autonomous_system]" => "%{[flow][geoip_src][asn]}" }
        }
      }
      mutate {
        id => "elastiflow_cleanup_src_as"
        remove_field => [
          "[flow][geoip_src][asn]",
          "[flow][geoip_src][as_org]"
        ]
      }
    }

    if [flow][server_locality] == "public" {
      geoip {
        id => "elastiflow_postproc_geoip_server_city"
        source => "[flow][server_addr]"
        database => "${ELASTIFLOW_GEOIP_DB_PATH:/etc/logstash/geoipdbs}/GeoLite2-City.mmdb"
        target => "[flow][geoip_server]"
        fields => [ "city_name", "country_name", "country_code2", "location" ]
        remove_field => [ "[flow][geoip_server][ip]" ]
      }
      geoip {
        id => "elastiflow_postproc_geoip_server_asn"
        source => "[flow][server_addr]"
        database => "${ELASTIFLOW_GEOIP_DB_PATH:/etc/logstash/geoipdbs}/GeoLite2-ASN.mmdb"
        target => "[flow][geoip_server]"
        remove_field => [ "[flow][geoip_server][ip]" ]
      }
      # Populate geoip_server.autonomous_system.
      if [flow][geoip_server][as_org] {
        if [flow][geoip_server][asn] {
          mutate {
            id => "elastiflow_postproc_server_as_from_as_org_asn"
            add_field => { "[flow][geoip_server][autonomous_system]" => "%{[flow][geoip_server][as_org]} (%{[flow][geoip_server][asn]})" }
          }
        } else {
          mutate {
            id => "elastiflow_postproc_server_as_from_as_org"
            add_field => { "[flow][geoip_server][autonomous_system]" => "%{[flow][geoip_server][as_org]}" }
          }
        }
      } else if [flow][geoip_server][asn] {
        mutate {
          id => "elastiflow_postproc_server_as_from_asn"
          add_field => { "[flow][geoip_server][autonomous_system]" => "%{[flow][geoip_server][asn]}" }
        }
      }
      mutate {
        id => "elastiflow_cleanup_server_as"
        remove_field => [
          "[flow][geoip_server][asn]",
          "[flow][geoip_server][as_org]"
        ]
      }
    } else {
      mutate {
        id => "elastiflow_postproc_server_as_private"
        add_field => { "[flow][geoip_server][autonomous_system]" => "private" }
      }
    }

    if [flow][client_locality] == "public" {
      geoip {
        id => "elastiflow_postproc_geoip_client_city"
        source => "[flow][client_addr]"
        database => "${ELASTIFLOW_GEOIP_DB_PATH:/etc/logstash/geoipdbs}/GeoLite2-City.mmdb"
        target => "[flow][geoip_client]"
        fields => [ "city_name", "country_name", "country_code2", "location" ]
        remove_field => [ "[flow][geoip_client][ip]" ]
      }
      geoip {
        id => "elastiflow_postproc_geoip_client_asn"
        source => "[flow][client_addr]"
        database => "${ELASTIFLOW_GEOIP_DB_PATH:/etc/logstash/geoipdbs}/GeoLite2-ASN.mmdb"
        target => "[flow][geoip_client]"
        remove_field => [ "[flow][geoip_client][ip]" ]
      }
      # Populate geoip_client.autonomous_system.
      if [flow][geoip_client][as_org] {
        if [flow][geoip_client][asn] {
          mutate {
            id => "elastiflow_postproc_client_as_from_as_org_asn"
            add_field => { "[flow][geoip_client][autonomous_system]" => "%{[flow][geoip_client][as_org]} (%{[flow][geoip_client][asn]})" }
          }
        } else {
          mutate {
            id => "elastiflow_postproc_client_as_from_as_org"
            add_field => { "[flow][geoip_client][autonomous_system]" => "%{[flow][geoip_client][as_org]}" }
          }
        }
      } else if [flow][geoip_client][asn] {
        mutate {
          id => "elastiflow_postproc_client_as_from_asn"
          add_field => { "[flow][geoip_client][autonomous_system]" => "%{[flow][geoip_client][asn]}" }
        }
      }
      mutate {
        id => "elastiflow_cleanup_client_as"
        remove_field => [
          "[flow][geoip_client][asn]",
          "[flow][geoip_client][as_org]"
        ]
      }
    } else {
      mutate {
        id => "elastiflow_postproc_client_as_private"
        add_field => { "[flow][geoip_client][autonomous_system]" => "private" }
      }
    }

    # Lookup geolocation of external traffic. Source IP has priority over destination IP.
    if [flow][src_locality] == "public" {
      geoip {
        id => "elastiflow_postproc_geoip_city_src"
        source => "[flow][src_addr]"
        database => "${ELASTIFLOW_GEOIP_DB_PATH:/etc/logstash/geoipdbs}/GeoLite2-City.mmdb"
        target => "[flow][geoip]"
        fields => [ "city_name", "country_name", "country_code2", "location" ]
        remove_field => [ "[flow][geoip][ip]" ]
      }
      geoip {
        id => "elastiflow_postproc_geoip_asn_src"
        source => "[flow][src_addr]"
        database => "${ELASTIFLOW_GEOIP_DB_PATH:/etc/logstash/geoipdbs}/GeoLite2-ASN.mmdb"
        target => "[flow][geoip]"
        remove_field => [ "[flow][geoip][ip]" ]
      }
    } else if [flow][dst_locality] == "public" {
      geoip {
        id => "elastiflow_postproc_geoip_city_dst"
        source => "[flow][dst_addr]"
        database => "${ELASTIFLOW_GEOIP_DB_PATH:/etc/logstash/geoipdbs}/GeoLite2-City.mmdb"
        target => "[flow][geoip]"
        fields => [ "city_name", "country_name", "country_code2", "location" ]
        remove_field => [ "[flow][geoip][ip]" ]
      }
      geoip {
        id => "elastiflow_postproc_geoip_asn_dst"
        source => "[flow][dst_addr]"
        database => "${ELASTIFLOW_GEOIP_DB_PATH:/etc/logstash/geoipdbs}/GeoLite2-ASN.mmdb"
        target => "[flow][geoip]"
        remove_field => [ "[flow][geoip][ip]" ]
      }
    }
    # Populate flow.geoip.autonomous_system.
    if [flow][geoip][as_org] {
      if [flow][geoip][asn] {
        mutate {
          id => "elastiflow_postproc_as_from_as_org_asn"
          add_field => { "[flow][geoip][autonomous_system]" => "%{[flow][geoip][as_org]} (%{[flow][geoip][asn]})" }
        }
      } else {
        mutate {
          id => "elastiflow_postproc_as_from_as_org"
          add_field => { "[flow][geoip][autonomous_system]" => "%{[flow][geoip][as_org]}" }
        }
      }
    } else if [flow][geoip][asn] {
      mutate {
        id => "elastiflow_postproc_as_from_asn"
        add_field => { "[flow][geoip][autonomous_system]" => "%{[flow][geoip][asn]}" }
      }
    }
    mutate {
      id => "elastiflow_cleanup_as"
      remove_field => [
        "[flow][geoip][asn]",
        "[flow][geoip][as_org]"
      ]
    }
  } else {
    mutate {
      add_field => { "[flow][geoip][autonomous_system]" => "private" }
    }
    if [flow][server_addr] {
      mutate {
        add_field => { "[flow][geoip_server][autonomous_system]" => "private" }
      }
    }
    if [flow][client_addr] {
      mutate {
        add_field => { "[flow][geoip_client][autonomous_system]" => "private" }
      }
    }
  }

  # Process TCP flags.
  if [flow][tcp_flags] {
    # Add TCP flags label.
    translate {
      id => "elastiflow_postproc_translate_tcp_flags_label"
      dictionary_path => "${ELASTIFLOW_DICT_PATH:/etc/logstash/dictionaries}/tcp_flags.yml"
      field => "[flow][tcp_flags]"
      destination => "[flow][tcp_flags_label]"
      fallback => "%{[flow][tcp_flags]}"
    }

    # Create array of TCP flag tags.
    ruby {
      id => "elastiflow_postproc_ruby_tcp_flags_tags"
      code => "
        flags =[]
        if event.get('[flow][tcp_flags]').to_i & 1 > 0
          flags.push('FIN')
        end
        if event.get('[flow][tcp_flags]').to_i & 2 > 0
          flags.push('SYN')
        end
        if event.get('[flow][tcp_flags]').to_i & 4 > 0
          flags.push('RST')
        end
        if event.get('[flow][tcp_flags]').to_i & 8 > 0
          flags.push('PSH')
        end
        if event.get('[flow][tcp_flags]').to_i & 16 > 0
          flags.push('ACK')
        end
        if event.get('[flow][tcp_flags]').to_i & 32 > 0
          flags.push('URG')
        end
        if event.get('[flow][tcp_flags]').to_i & 64 > 0
          flags.push('ECE')
        end
        if event.get('[flow][tcp_flags]').to_i & 128 > 0
          flags.push('CWR')
        end
        event.set('[flow][tcp_flag_tags]', flags)
      "
    }
  }

  if [@metadata][keep_orig_data] == "false" {
    mutate {
      remove_field => [ "ipfix", "netflow", "sflow" ]
    }
  }
}
