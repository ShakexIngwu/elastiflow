#------------------------------------------------------------------------------
# Copyright (C)2018 KOIOSSIAN
# 
# The contents of this file and/or repository are subject to the Koiossian
# Public License (the "License") and may not be used or distributed except in
# compliance with the License. You may obtain a copy of the License at:
# 
# http://www.koiossian.com/public/koiossian_public_license.txt
# 
# Software distributed under the License is distributed on an "AS IS" basis,
# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for
# the specific language governing rights and limitations under the License.
# 
# The Original Source Code was developed by Koiossian. Portions created by
# Koiossian are Copyright (C)2018 Koiossian. All Rights Reserved.
#------------------------------------------------------------------------------

filter {
  if [event][type] == "sflow" {
    # Process sFlow flow sample events.
    if [sflow_type] == "flow_sample" {
      # Restructure common sFlow data into an object.
      mutate {
        id => "sflow_rename_sflow_fields"
        rename => {
          "agent_ip" => "[sflow][agent_ip]"
          "ip_version" => "[sflow][ip_version]"
          "sample_seq_number" => "[sflow][sample_seq_number]"
          "sflow_type" => "[sflow][sflow_type]"
          "source_id_index" => "[sflow][source_id_index]"
          "source_id_type" => "[sflow][source_id_type]"
          "sub_agent_id" => "[sflow][sub_agent_id]"
          "uptime_in_ms" => "[sflow][uptime_in_ms]"
          "drops" => "[sflow][drops]"
          "dst_ip" => "[sflow][dst_ip]"
          "dst_mac" => "[sflow][dst_mac]"
          "dst_mask_len" => "[sflow][dst_mask_len]"
          "dst_port" => "[sflow][dst_port]"
          "dst_priority" => "[sflow][dst_priority]"
          "dst_vlan" => "[sflow][dst_vlan]"
          "eth_dst" => "[sflow][eth_dst]"
          "eth_src" => "[sflow][eth_src]"
          "eth_type" => "[sflow][eth_type]"
          "flow_sequence_number" => "[sflow][flow_sequence_number]"
          "frame_length" => "[sflow][frame_length]"
          "frame_length_times_sampling_rate" => "[sflow][frame_length_times_sampling_rate]"
          "header_size" => "[sflow][header_size]"
          "input_interface" => "[sflow][input_interface]"
          "input_interface_format" => "[sflow][input_interface_format]"
          "input_interface_value" => "[sflow][input_interface_value]"
          "ip_address_next_hop_router" => "[sflow][ip_address_next_hop_router]"
          "ip_checksum" => "[sflow][ip_checksum]"
          "ip_dscp" => "[sflow][ip_dscp]"
          "ip_ecn" => "[sflow][ip_ecn]"
          "ip_flags" => "[sflow][ip_flags]"
          "ip_fragment_offset" => "[sflow][ip_fragment_offset]"
          "ip_header_length" => "[sflow][ip_header_length]"
          "ip_identification" => "[sflow][ip_identification]"
          "ip_next_header" => "[sflow][ip_next_header]"
          "ip_packet_length" => "[sflow][ip_packet_length]"
          "ip_priority" => "[sflow][ip_priority]"
          "ip_protocol" => "[sflow][ip_protocol]"
          "ip_total_length" => "[sflow][ip_total_length]"
          "ip_ttl" => "[sflow][ip_ttl]"
          "ip_type" => "[sflow][ip_type]"
          "output_interface" => "[sflow][output_interface]"
          "output_interface_format" => "[sflow][output_interface_format]"
          "output_interface_value" => "[sflow][output_interface_value]"
          "packet_length" => "[sflow][packet_length]"
          "padded" => "[sflow][padded]"
          "protocol" => "[sflow][protocol]"
          "sample_length" => "[sflow][sample_length]"
          "sample_pool" => "[sflow][sample_pool]"
          "sampling_rate" => "[sflow][sampling_rate]"
          "sflow_version" => "[sflow][sflow_version]"
          "size_header" => "[sflow][size_header]"
          "src_ip" => "[sflow][src_ip]"
          "src_mac" => "[sflow][src_mac]"
          "src_mask_len" => "[sflow][src_mask_len]"
          "src_port" => "[sflow][src_port]"
          "src_priority" => "[sflow][src_priority]"
          "src_vlan" => "[sflow][src_vlan]"
          "stripped" => "[sflow][stripped]"
          "tcp_ack_number" => "[sflow][tcp_ack_number]"
          "tcp_checksum" => "[sflow][tcp_checksum]"
          "tcp_flags" => "[sflow][tcp_flags]"
          "tcp_header_length" => "[sflow][tcp_header_length]"
          "tcp_reserved" => "[sflow][tcp_reserved]"
          "tcp_seq_number" => "[sflow][tcp_seq_number]"
          "tcp_urgent_pointer" => "[sflow][tcp_urgent_pointer]"
          "tcp_window_size" => "[sflow][tcp_window_size]"
          "udp_checksum" => "[sflow][udp_checksum]"
          "udp_length" => "[sflow][udp_length]"
          "vlan_cfi" => "[sflow][vlan_cfi]"
          "vlan_id" => "[sflow][vlan_id]"
          "vlan_priority" => "[sflow][vlan_priority]"
          "vlan_type" => "[sflow][vlan_type]"
        }
      }

      # lookup source ID type to find the a value for source_id_type_name.
      if [sflow][source_id_type] {
        translate {
          id => "sflow_translate_source_id_type"
          dictionary_path => "${ELASTIFLOW_DICT_PATH:/etc/logstash/dictionaries}/sflow_source_id_type.yml"
          field => "[sflow][source_id_type]"
          destination => "[sflow][source_id_type_name]"
          fallback => "__UNKNOWN"
        }
      }
      # Check to see if source_id_type_name. If it doesn't then the source ID type wasn't found in the translation table, so we will assign the source ID type to source_id_type_name.
      if [sflow][source_id_type_name] == "__UNKNOWN" {
        mutate {
          id => "sflow_translate_source_id_type_no_name"
          add_field => { "[sflow][source_id_type_name]" => "%{[sflow][source_id_type]}" }
        }
      }
      
      # Populate normalized ElastiFlow fields with simple mapping from sFlow flow sample.
      mutate {
        id => "sflow_simple_mappings"
        add_field => { "[flow][direction]" => "ingress" }
      }
      if [sflow][input_interface] {
        mutate {
          id => "sflow_simple_mappings_add_in_if_index"
          add_field => { "[flow][input_snmp]" => "%{[sflow][input_interface]}" }
        }
      }
      if [sflow][output_interface] {
        mutate {
          id => "sflow_simple_mappings_add_out_if_index"
          add_field => { "[flow][output_snmp]" => "%{[sflow][output_interface]}" }
        }
      }
      if [sflow][ip_protocol] {
        mutate {
          id => "sflow_simple_mappings_add_ip_protocol"
          add_field => { "[flow][ip_protocol]" => "%{[sflow][ip_protocol]}" }
        }
        mutate {
          id => "sflow_simple_mappings_convert_ip_protocol"
          convert => { "[flow][ip_protocol]" => "integer" }
        }
      }
      if [sflow][tcp_flags] {
        mutate {
          id => "sflow_simple_mappings_add_tcp_flags"
          add_field => { "[flow][tcp_flags]" => "%{[sflow][tcp_flags]}" }
        }
      }
      if [sflow][ip_version] {
        if [sflow][ip_version] == "4" {
          mutate {
            id => "sflow_simple_mappings_add_ip_version_4"
            add_field => {
              "[flow][ip_version]" => "IPv4"
            }
          }
        } else if [sflow][ip_version] == "6" {
          mutate {
            id => "sflow_simple_mappings_add_ip_version_6"
            add_field => {
              "[flow][ip_version]" => "IPv6"
            }
          }
        } else {
          # Did not recognize IP version.
          mutate {
            id => "sflow_ip_version_not_recognized"
            add_tag => [ "__sflow_ip_version_not_recognized" ]
            replace => { "[flow][ip_version]" => "undetermined" }
          }
        }
      }
      if [sflow][src_ip] {
        mutate {
          id => "sflow_simple_mappings_add_src_addr"
          add_field => { "[flow][src_addr]" => "%{[sflow][src_ip]}" }
        }
      }
      if [sflow][src_mask_len] {
        mutate {
          id => "sflow_simple_mappings_add_src_mask_len"
          add_field => { "[flow][src_mask_len]" => "%{[sflow][src_mask_len]}" }
        }
      }
      if [sflow][src_port] {
        mutate {
          id => "sflow_simple_mappings_add_src_port"
          add_field => { "[flow][src_port]" => "%{[sflow][src_port]}" }
        }
        mutate {
          id => "sflow_simple_mappings_convert_src_port"
          convert => { "[flow][src_port]" => "integer" }
        }
      }
      if [sflow][dst_ip] {
        mutate {
          id => "sflow_simple_mappings_add_dst_addr"
          add_field => { "[flow][dst_addr]" => "%{[sflow][dst_ip]}" }
        }
      }
      if [sflow][dst_mask_len] {
        mutate {
          id => "sflow_simple_mappings_add_dst_mask_len"
          add_field => { "[flow][dst_mask_len]" => "%{[sflow][dst_mask_len]}" }
        }
      }
      if [sflow][dst_port] {
        mutate {
          id => "sflow_simple_mappings_add_dst_port"
          add_field => { "[flow][dst_port]" => "%{[sflow][dst_port]}" }
        }
        mutate {
          id => "sflow_simple_mappings_convert_dst_port"
          convert => { "[flow][dst_port]" => "integer" }
        }
      }
      if [sflow][frame_length_times_sampling_rate] {
        mutate {
          id => "sflow_simple_mappings_add_bytes"
          add_field => { "[flow][bytes]" => "%{[sflow][frame_length_times_sampling_rate]}" }
        }
        mutate {
          id => "sflow_simple_mappings_convert_bytes"
          convert => { "[flow][bytes]" => "integer" }
        }
      }
      if [sflow][sampling_rate] {
        mutate {
          id => "sflow_simple_mappings_add_sampling_interval"
          add_field => {
            "[flow][sampling_interval]" => "%{[sflow][sampling_rate]}"
            "[flow][packets]" => "%{[sflow][sampling_rate]}"
          }
        }
        mutate {
          id => "sflow_simple_mappings_convert_sampling_interval"
          convert => {
            "[flow][sampling_interval]" => "integer"
            "[flow][packets]" => "integer"
          }
        }
      }
      if [sflow][ip_address_next_hop_router] {
        mutate {
          id => "sflow_simple_mappings_add_next_hop"
          add_field => { "[flow][next_hop]" => "%{[sflow][ip_address_next_hop_router]}" }
        }
      }

      # Populate normalized ElastiFlow fields with source and destination MAC addresses if available.
      if [sflow][eth_src] {
        mutate {
          id => "sflow_add_src_mac_eth"
          add_field => { "[flow][src_mac]" => "%{[sflow][eth_src]}" }
        }
      } else if [sflow][src_mac] {
        mutate {
          id => "sflow_add_src_mac"
          add_field => { "[flow][src_mac]" => "%{[sflow][src_mac]}" }
        }
      }
      if [sflow][eth_dst] {
        mutate {
          id => "sflow_add_dst_mac_eth"
          add_field => { "[flow][dst_mac]" => "%{[sflow][eth_dst]}" }
        }
      } else if [sflow][dst_mac] {
        mutate {
          id => "sflow_add_dst_mac_out"
          add_field => { "[flow][dst_mac]" => "%{[sflow][dst_mac]}" }
        }
      }

      # Populate normalized ElastiFlow fields with TOS value if available.
      if [sflow][ip_dscp] {
        mutate {
          id => "sflow_add_tos_ip_dscp"
          add_field => { "[flow][tos]" => "%{[sflow][ip_dscp]}" }
        }
      } else if [sflow][dst_priority] {
        mutate {
          id => "sflow_add_tos_dst_priority"
          add_field => { "[flow][tos]" => "%{[sflow][dst_priority]}" }
        }
      } else if [sflow][src_priority] {
        mutate {
          id => "sflow_add_tos_src_priority"
          add_field => { "[flow][tos]" => "%{[sflow][src_priority]}" }
        }
      } else if [sflow][ip_priority] {
        mutate {
          id => "sflow_add_tos_ip_priority"
          add_field => { "[flow][tos]" => "%{[sflow][ip_priority]}" }
        }
      }

      # Populate normalized ElastiFlow fields with source VLAN if available.
      if [sflow][vlan_id] {
        mutate {
          id => "sflow_add_vlan"
          add_field => { "[flow][vlan]" => "%{[sflow][vlan_id]}" }
        }
      }

      if [sflow][protocol] {
        translate {
          id => "sflow_translate_protocol_name"
          dictionary_path => "${ELASTIFLOW_DICT_PATH:/etc/logstash/dictionaries}/sflow_header_protocol.yml"
          field => "[sflow][protocol]"
          destination => "[sflow][protocol_name]"
          fallback => "undetermined"
        }
      }
    } else {
      # sFlow counter samples are dropped.
      drop { }
    }
  }
}
