#------------------------------------------------------------------------------
# Copyright (C)2018 Robert Cowart
# 
# The contents of this file and/or repository are subject to the Robert Cowart
# Public License (the "License") and may not be used or distributed except in
# compliance with the License. You may obtain a copy of the License at:
# 
# http://www.koiossian.com/public/robert_cowart_public_license.txt
# 
# Software distributed under the License is distributed on an "AS IS" basis,
# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for
# the specific language governing rights and limitations under the License.
# 
# The Original Source Code was developed by Robert Cowart. Portions created by
# Robert Cowart are Copyright (C)2018 Robert Cowart. All Rights Reserved.
#------------------------------------------------------------------------------

filter {
  if [event][type] == "ipfix" {
    # If flows are sent through a proxy that adds exporterIPv4Address or exporterIPv6Address, then reset node.ipaddr and node.hostname.
    if [ipfix][exporterIPv4Address] or [ipfix][exporterIPv6Address] {
      if [ipfix][exporterIPv4Address] {
        mutate {
          id => "ipfix_set_node_exporter_ipv4"
          replace => {
            "[node][ipaddr]" => "%{[ipfix][exporterIPv4Address]}"
            "[node][hostname]" => "%{[ipfix][exporterIPv4Address]}"
          }
        }
        mutate {
          id => "ipfix_remove_exporterIPv4Address"
          remove_field => [ "[ipfix][exporterIPv4Address]" ]
        }
      } else if [ipfix][exporterIPv6Address] {
        mutate {
          id => "ipfix_set_node_exporter_ipv6"
          replace => {
            "[node][ipaddr]" => "%{[ipfix][exporterIPv6Address]}"
            "[node][hostname]" => "%{[ipfix][exporterIPv6Address]}"
          }
        }
        mutate {
          id => "ipfix_remove_exporterIPv6Address"
          remove_field => [ "[ipfix][exporterIPv6Address]" ]
        }
      }

      if [@metadata][resolve_ip2host] == "true" {
        dns {
          id => "ipfix_dns_node_name"
          reverse => [ "[node][hostname]" ]
          action => "replace"
          nameserver => "${ELASTIFLOW_NAMESERVER:127.0.0.1}"
        }
      }
    }
    
    # Populate normalized ElastiFlow fields with simple mapping from IPFIX flow fields.
    mutate {
      id => "ipfix_simple_mappings"
      rename => {
        "[ipfix][protocolIdentifier]" => "[flow][ip_protocol]"
        "[ipfix][tcpControlBits]" => "[flow][tcp_flags]"
        "[ipfix][samplingFlowInterval]" => "[flow][sampling_interval]"
        "[ipfix][sourceMacAddress]" => "[flow][src_mac]"
        "[ipfix][destinationMacAddress]" => "[flow][dst_mac]"
        "[ipfix][vlanId]" => "[flow][vlan]"
        "[ipfix][bgpValidityState]" => "[flow][bgp_valid_state]"
      }
    }
    mutate {
      id => "ipfix_simple_mappings_convert"
      convert => {
        "[flow][ip_protocol]" => "integer"
        "[flow][sampling_interval]" => "integer"
        "[flow][tcp_flags]" => "integer"
      }
    }

    if [ipfix][ipVersion] {
      mutate {
        id => "ipfix_simple_mappings_add_ip_version"
        add_field => { "[flow][ip_version]" => "IPv%{[ipfix][ipVersion]}" }
      }
      mutate {
        id => "ipfix_remove_ipVersion"
        remove_field => [ "[ipfix][ipVersion]" ]
      }
    }

    # Populate normalized ElastiFlow fields with IPv4 or IPv6 specific fields.
    if [ipfix][sourceIPv4Address] or [ipfix][destinationIPv4Address] or [flow][ip_version] == "IPv4" {
      # Looks like an IPv4 flow.
      if ![flow][ip_version] {
        mutate {
          id => "ipfix_ipv4_ip_version"
          add_field => { "[flow][ip_version]" => "IPv4" }
        }
      }

      mutate {
        id => "ipfix_ipv4_mappings"
        rename => {
          "[ipfix][sourceIPv4Address]" => "[flow][src_addr]"
          "[ipfix][sourceIPv4PrefixLength]" => "[flow][src_mask_len]"
          "[ipfix][destinationIPv4Address]" => "[flow][dst_addr]"
          "[ipfix][destinationIPv4PrefixLength]" => "[flow][dst_mask_len]"
          "[ipfix][ipNextHopIPv4Address]" => "[flow][next_hop]"
          "[ipfix][bgpNextHopIPv4Address]" => "[flow][bgp_next_hop]"
        }
      }
    } else if [ipfix][sourceIPv6Address] or [ipfix][destinationIPv6Address] or [flow][ip_version] == "IPv6" {
      # Looks like an IPv6 flow.
      if ![flow][ip_version] {
        mutate {
          id => "ipfix_ipv6_ip_version"
          add_field => { "[flow][ip_version]" => "IPv6" }
        }
      }

      mutate {
        id => "ipfix_ipv6_mappings"
        rename => {
          "[ipfix][sourceIPv6Address]" => "[flow][src_addr]"
          "[ipfix][sourceIPv6PrefixLength]" => "[flow][src_mask_len]"
          "[ipfix][destinationIPv6Address]" => "[flow][dst_addr]"
          "[ipfix][destinationIPv6PrefixLength]" => "[flow][dst_mask_len]"
          "[ipfix][ipNextHopIPv6Address]" => "[flow][next_hop]"
          "[ipfix][bgpNextHopIPv6Address]" => "[flow][bgp_next_hop]"
        }
      }
    } else {
      # Did not recognize IP version.
      mutate {
        id => "ipfix_ip_version_not_recognized"
        add_tag => [ "__ipfix_ip_version_not_recognized" ]
        remove_field => [ "[flow][ip_version]" ]
      }
    }

    # Populate normalized ElastiFlow fields with source protocol port.
    if [ipfix][sourceTransportPort] {
      mutate {
        id => "ipfix_add_src_port_transport"
        rename => { "[ipfix][sourceTransportPort]" => "[flow][src_port]" }
      }
    } else if [ipfix][tcpSourcePort] {
      mutate {
        id => "ipfix_add_src_port_tcp"
        rename => { "[ipfix][tcpSourcePort]" => "[flow][src_port]" }
      }
    } else if [ipfix][udpSourcePort] {
      mutate {
        id => "ipfix_add_src_port_udp"
        rename => { "[ipfix][udpSourcePort]" => "[flow][src_port]" }
      }
    }
    if [flow][src_port] {
      mutate {
        id => "ipfix_convert_src_port"
        convert => { "[flow][src_port]" => "integer" }
      }
    }

    # Populate normalized ElastiFlow fields with destination protocol port.
    if [ipfix][destinationTransportPort] {
      mutate {
        id => "ipfix_add_dst_port_transport"
        rename => { "[ipfix][destinationTransportPort]" => "[flow][dst_port]" }
      }
    } else if [ipfix][tcpDestinationPort] {
      mutate {
        id => "ipfix_add_dst_port_tcp"
        rename => { "[ipfix][tcpDestinationPort]" => "[flow][dst_port]" }
      }
    } else if [ipfix][udpDestinationPort] {
      mutate {
        id => "ipfix_add_dst_port_udp"
        rename => { "[ipfix][udpDestinationPort]" => "[flow][dst_port]" }
      }
    }
    if [flow][dst_port] {
      mutate {
        id => "ipfix_convert_dst_port"
        convert => { "[flow][dst_port]" => "integer" }
      }
    }

    # Populate normalized ElastiFlow fields with ingress interface index.
    if [ipfix][ingressInterface] {
      mutate {
        id => "ipfix_add_in_if_index"
        rename => { "[ipfix][ingressInterface]" => "[flow][input_snmp]" }
      }
    } else if [ipfix][ingressPhysicalInterface] {
      mutate {
        id => "ipfix_add_in_if_index_phy"
        rename => { "[ipfix][ingressPhysicalInterface]" => "[flow][input_snmp]" }
      }
    }

    # Populate normalized ElastiFlow fields with egress interface index.
    if [ipfix][egressInterface] {
      mutate {
        id => "ipfix_add_out_if_index"
        rename => { "[ipfix][egressInterface]" => "[flow][output_snmp]" }
      }
    } else if [ipfix][egressPhysicalInterface] {
      mutate {
        id => "ipfix_add_out_if_index_phy"
        rename => { "[ipfix][egressPhysicalInterface]" => "[flow][output_snmp]" }
      }
    }

    # Populate normalized ElastiFlow fields with TOS value if available.
    if [ipfix][ipDiffServCodePoint] {
      mutate {
        id => "ipfix_add_tos_ip_dscp"
        rename => { "[ipfix][ipDiffServCodePoint]" => "[flow][tos]" }
      }
    } else if [ipfix][ipPrecedence] {
      mutate {
        id => "ipfix_add_tos_ip_prec"
        rename => { "[ipfix][ipPrecedence]" => "[flow][tos]" }
      }
    } else if [ipfix][ipClassOfService] {
      mutate {
        id => "ipfix_add_tos_ip_cos"
        rename => { "[ipfix][ipClassOfService]" => "[flow][tos]" }
      }
    }

    # Populate normalized ElastiFlow fields with flow directiom (ingress/egress).
    if [ipfix][flowDirection] {
      if [ipfix][flowDirection] == 0 {
        mutate {
          id => "ipfix_add_direction_ingress"
          add_field => {
            "[flow][direction]" => "ingress"
          }
        }
      } else if [ipfix][flowDirection] == 1 {
        mutate {
          id => "ipfix_add_direction_egress"
          add_field => {
            "[flow][direction]" => "egress"
          }
        }
      } else {
        mutate {
          id => "ipfix_direction_not_recognized"
          add_field => { "[flow][direction]" => "undetermined" }
        }
      }
      mutate {
        id => "ipfix_remove_direction"
        remove_field => [ "[ipfix][flowDirection]" ]
      }
    } else {
      mutate {
        id => "ipfix_direction_not_specified"
        add_field => { "[flow][direction]" => "unspecified" }
      }
    }

    # Populate normalized ElastiFlow fields with bytes if available.
    if [ipfix][octetDeltaCount] {
      mutate {
        id => "ipfix_add_bytes"
        rename => { "[ipfix][octetDeltaCount]" => "[flow][bytes]" }
      }
    } else if [ipfix][layer2OctetDeltaCount] {
      mutate {
        id => "ipfix_add_bytes_l2"
        rename => { "[ipfix][layer2OctetDeltaCount]" => "[flow][bytes]" }
      }
    } else if [ipfix][postOctetDeltaCount] {
      mutate {
        id => "ipfix_add_bytes_post"
        rename => { "[ipfix][postOctetDeltaCount]" => "[flow][bytes]" }
      }
    } else if [ipfix][postLayer2OctetDeltaCount] {
      mutate {
        id => "ipfix_add_bytes_l2_post"
        rename => { "[ipfix][postLayer2OctetDeltaCount]" => "[flow][bytes]" }
      }
    }
    if [flow][bytes] {
      mutate {
        id => "ipfix_convert_bytes"
        convert => { "[flow][bytes]" => "integer" }
      }
    }

    # Populate normalized ElastiFlow fields with packets if available.
    if [ipfix][packetDeltaCount] {
      mutate {
        id => "ipfix_add_packets"
        rename => { "[ipfix][packetDeltaCount]" => "[flow][packets]" }
      }
    } else if [ipfix][layer2FrameDeltaCount] {
      mutate {
        id => "ipfix_add_packets_l2_frame"
        rename => { "[ipfix][layer2FrameDeltaCount]" => "[flow][packets]" }
      }
    } else if [ipfix][postPacketDeltaCount] {
      mutate {
        id => "ipfix_add_packets_post"
        rename => { "[ipfix][postPacketDeltaCount]" => "[flow][packets]" }
      }
    }
    if [flow][packets] {
      mutate {
        id => "ipfix_convert_packets"
        convert => { "[flow][packets]" => "integer" }
      }
    }
    
    # If sampled IPFIX, adjust Bytes and Packets accordingly.
    if [flow][sampling_interval] {
      if [flow][bytes] and [flow][sampling_interval] > 0 {
        ruby {
          id => "ipfix_adjust_sampled_bytes"
          code => "
            event.set( '[flow][bytes]', event.get('[flow][bytes]').to_i * event.get('[flow][sampling_interval]').to_i )
          "
        }
      }
      if [flow][packets] and [flow][sampling_interval] > 0 {
        ruby {
          id => "ipfix_adjust_sampled_packets"
          code => "
            event.set( '[flow][packets]', event.get('[flow][packets]').to_i * event.get('[flow][sampling_interval]').to_i )
          "
        }
      }
    }
  }
}
